<?xml version="1.0" encoding="UTF-8"?>
<!-- 수정함: xsi:~에주소 하나씩 나타나게하고, 5.0 삭제 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- 커스텀된 AccessDeniedHandler를 사용할 수 있도록 빈 저장 -->
	<bean id="customAccessDenied" class="org.ict.security.CustomAccessDeniedHandler"/>
	
	<!-- 기존 로그인 로직을 커스텀된 로그인 로직으로 바꿔서 적용 -->
	<bean id="customLoginSuccess" class="org.ict.security.CustomLoginSuccessHandler" />
	
	<!-- 비밀번호 암호화 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- MemberMapper의 데이터를 스프링 시큐리티에서 처리할 수 있도록 커스터마이징 -->
	<bean id="customUserDetailsService" class="org.ict.security.CustomUserDetailsService"/>
	<!-- http 영역 -->
	<security:http auto-config="true" use-expressions="true">
	
		<!-- pattern에 해당하는 url에 접근하면 접속요청을 스프링 시큐리티가 가로챔 -> 접근을 시킬지 말지 결정
			pattern: 어떤 url을 가로챌 것인지, access: 접근에 대한 처리를 어떻게 할지 -->
		<!-- /secu/all: 모든 유저에게 접근 허용 -->
		<security:intercept-url pattern="/secu/all" access="permitAll"/>
		
		<!-- /secu/member: 멤버에게만 접근 허용 -->
		<security:intercept-url pattern="/secu/member" access="hasRole('ROLE_MEMBER')"/>
		
		<!-- /secu/member: admin에게만 접근 허용 -->
		<security:intercept-url pattern="/secu/admin" access="hasRole('ROLE_ADMIN')"/>
	
		<security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- 접근 거부가 발생한 경우, 접근 제한 페이지 변경(톰캣 기본페이지에서 커스텀된 템플릿으로) -->
		<!-- <security:access-denied-handler error-page="/accessError"/>  -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 로그아웃에서 사용할 url을 저장하고, 로그아웃이 되면 세션을 파기할 수 있도록 작성 -->
		<security:logout logout-url="/customLogout" invalidate-session="true"/>
	</security:http>
	
	<!-- 인증 영역(인증 매니저 추가) -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
		<!-- DB에 데이터를 생성했기 때문에 임시로 만든 id, pw를 주석처리 -->
	<!-- 	<security:user-service>  -->
				<!-- id와 password를 임시로 만들어 테스트 {no option}을 작성해 비밀번호 복호화 강제처리를 off 
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/> -->
				<!-- authorities에 member에 대한 권한을 추가해주면 admin 계정으로도 member 페이지에 로그인이 가능 
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/> -->
	<!--	</security:user-service> -->
			<!-- DB를 근거로 로그인 서비스를 진행하겠다는 의미 -->
	<!--	<security:jdbc-user-service data-source-ref="dataSource"/>	-->
			<!-- pw 암호화를 위해 스프링 시큐리티에서 제공 -->
			<security:password-encoder ref="bcryptPasswordEncoder"/> 
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
